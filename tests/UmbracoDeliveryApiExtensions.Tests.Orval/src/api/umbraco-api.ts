/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 * OpenAPI spec version: Latest
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type GetMediaItemById404 = ProblemDetails | HttpValidationProblemDetails;

export type GetMediaItemByIdParams = {
/**
 * Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
expand?: string;
};

export type GetMediaItemByPathParams = {
/**
 * Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
expand?: string;
};

export type GetMediaItemParams = {
id?: string[];
/**
 * Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
expand?: string;
};

export type GetMedia400 = ProblemDetails | HttpValidationProblemDetails;

export type GetMediaParams = {
/**
 * Specifies the media items to fetch. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
fetch?: string;
/**
 * Defines how to filter the fetched media items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
filter?: string[];
/**
 * Defines how to sort the found media items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
sort?: string[];
/**
 * Specifies the number of found media items to skip. Use this to control pagination of the response.
 */
skip?: number;
/**
 * Specifies the number of found media items to take. Use this to control pagination of the response.
 */
take?: number;
/**
 * Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
expand?: string;
};

export type GetContentItemById404 = ProblemDetails | HttpValidationProblemDetails;

export type GetContentItemById401 = ProblemDetails | HttpValidationProblemDetails;

export type GetContentItemByIdParams = {
/**
 * Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
expand?: string;
};

export type GetContentItemByPath401 = ProblemDetails | HttpValidationProblemDetails;

export type GetContentItemByPathParams = {
/**
 * Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
expand?: string;
};

export type GetContentItemParams = {
id?: string[];
/**
 * Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
expand?: string;
};

export type GetContentParams = {
/**
 * Specifies the content items to fetch. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
fetch?: string;
/**
 * Defines how to filter the fetched content items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
filter?: string[];
/**
 * Defines how to sort the found content items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
sort?: string[];
/**
 * Specifies the number of found content items to skip. Use this to control pagination of the response.
 */
skip?: number;
/**
 * Specifies the number of found content items to take. Use this to control pagination of the response.
 */
take?: number;
/**
 * Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.
 */
expand?: string;
};

export interface ProblemDetails {
  detail?: string | null;
  instance?: string | null;
  status?: number | null;
  title?: string | null;
  type?: string | null;
  [key: string]: unknown;
}

export type GetMediaItemByPath404 = ProblemDetails | HttpValidationProblemDetails;

export type GetContentItemByPath404 = ProblemDetails | HttpValidationProblemDetails;

export type GetContent404 = ProblemDetails | HttpValidationProblemDetails;

export type GetContent400 = ProblemDetails | HttpValidationProblemDetails;

export interface PagedIApiContentResponseModel {
  items: IApiContentResponseModel[];
  total: number;
}

export interface PagedApiMediaWithCropsResponseModel {
  items: ApiMediaWithCropsResponseModel[];
  total: number;
}

export interface PageHomePropertiesModel {
  text?: string | null;
}

export type PageHomeElementModelContentType = typeof PageHomeElementModelContentType[keyof typeof PageHomeElementModelContentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PageHomeElementModelContentType = {
  pageHome: 'pageHome',
} as const;

export type PageHomeElementModel = IApiElementModelBase & {
  contentType: PageHomeElementModelContentType;
  properties?: PageHomePropertiesModel;
};

export type PageHomeContentResponseModelContentType = typeof PageHomeContentResponseModelContentType[keyof typeof PageHomeContentResponseModelContentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PageHomeContentResponseModelContentType = {
  pageHome: 'pageHome',
} as const;

export type PageHomeContentModelContentType = typeof PageHomeContentModelContentType[keyof typeof PageHomeContentModelContentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PageHomeContentModelContentType = {
  pageHome: 'pageHome',
} as const;

export type PageHomeContentModel = IApiContentModelBase & PageHomeElementModel & {
  contentType: PageHomeContentModelContentType;
};

export type PageHomeContentResponseModel = IApiContentResponseModelBase & PageHomeContentModel & {
  contentType: PageHomeContentResponseModelContentType;
};

export interface ImageCropperFocalPointModel {
  left?: number;
  top?: number;
}

export interface ImageCropperCropCoordinatesModel {
  x1?: number;
  x2?: number;
  y1?: number;
  y2?: number;
}

export interface ImageCropperCropModel {
  alias?: string | null;
  coordinates?: ImageCropperCropCoordinatesModel;
  height?: number;
  width?: number;
}

export type IApiElementModelBaseProperties = {[key: string]: unknown};

export interface IApiElementModelBase {
  readonly contentType?: string;
  readonly id?: string;
  readonly properties?: IApiElementModelBaseProperties;
}

export type IApiElementModel = PageHomeElementModel;

export interface IApiContentStartItemModel {
  readonly id?: string;
  readonly path?: string;
}

export interface IApiContentRouteModel {
  readonly path?: string;
  startItem?: IApiContentStartItemModel;
}

export type IApiContentResponseModelBaseProperties = {[key: string]: unknown};

export type IApiContentResponseModelBaseCultures = {[key: string]: IApiContentRouteModel};

export type IApiContentResponseModelBase = IApiContentModelBase & {
  readonly contentType?: string;
  readonly createDate?: string;
  readonly cultures?: IApiContentResponseModelBaseCultures;
  readonly id?: string;
  readonly name?: string | null;
  readonly properties?: IApiContentResponseModelBaseProperties;
  route?: IApiContentRouteModel;
  readonly updateDate?: string;
};

export type IApiContentResponseModel = PageHomeContentResponseModel;

export type IApiContentModelBaseProperties = {[key: string]: unknown};

export type IApiContentModelBase = IApiElementModelBase & {
  readonly contentType?: string;
  readonly createDate?: string;
  readonly id?: string;
  readonly name?: string | null;
  readonly properties?: IApiContentModelBaseProperties;
  route?: IApiContentRouteModel;
  readonly updateDate?: string;
};

export type IApiContentModel = PageHomeContentModel;

export type HttpValidationProblemDetailsErrors = {[key: string]: string[]};

export type HttpValidationProblemDetails = ProblemDetails & {
  readonly errors?: HttpValidationProblemDetailsErrors;
  [key: string]: unknown;
};

export type ApiMediaWithCropsModelProperties = {[key: string]: unknown};

export interface ApiMediaWithCropsModel {
  readonly bytes?: number | null;
  crops?: ImageCropperCropModel[] | null;
  readonly extension?: string | null;
  focalPoint?: ImageCropperFocalPointModel;
  readonly height?: number | null;
  readonly id?: string;
  readonly mediaType?: string;
  readonly name?: string;
  readonly properties?: ApiMediaWithCropsModelProperties;
  readonly url?: string;
  readonly width?: number | null;
}

export type ApiMediaWithCropsResponseModel = ApiMediaWithCropsModel & {
  createDate?: string;
  path?: string;
  updateDate?: string;
};





  export const getContent = <TData = AxiosResponse<PagedIApiContentResponseModel>>(
    params?: GetContentParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:34962/umbraco/delivery/api/v1/content`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getContentItem = <TData = AxiosResponse<IApiContentResponseModel[]>>(
    params?: GetContentItemParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:34962/umbraco/delivery/api/v1/content/item`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getContentItemByPath = <TData = AxiosResponse<IApiContentResponseModel>>(
    path: string,
    params?: GetContentItemByPathParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:34962/umbraco/delivery/api/v1/content/item/${path}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getContentItemById = <TData = AxiosResponse<IApiContentResponseModel>>(
    id: string,
    params?: GetContentItemByIdParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:34962/umbraco/delivery/api/v1/content/item/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getMedia = <TData = AxiosResponse<PagedApiMediaWithCropsResponseModel>>(
    params?: GetMediaParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:34962/umbraco/delivery/api/v1/media`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getMediaItem = <TData = AxiosResponse<ApiMediaWithCropsResponseModel[]>>(
    params?: GetMediaItemParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:34962/umbraco/delivery/api/v1/media/item`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getMediaItemByPath = <TData = AxiosResponse<ApiMediaWithCropsResponseModel>>(
    path: string,
    params?: GetMediaItemByPathParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:34962/umbraco/delivery/api/v1/media/item/${path}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getMediaItemById = <TData = AxiosResponse<ApiMediaWithCropsResponseModel>>(
    id: string,
    params?: GetMediaItemByIdParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:34962/umbraco/delivery/api/v1/media/item/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export type GetContentResult = AxiosResponse<PagedIApiContentResponseModel>
export type GetContentItemResult = AxiosResponse<IApiContentResponseModel[]>
export type GetContentItemByPathResult = AxiosResponse<IApiContentResponseModel>
export type GetContentItemByIdResult = AxiosResponse<IApiContentResponseModel>
export type GetMediaResult = AxiosResponse<PagedApiMediaWithCropsResponseModel>
export type GetMediaItemResult = AxiosResponse<ApiMediaWithCropsResponseModel[]>
export type GetMediaItemByPathResult = AxiosResponse<ApiMediaWithCropsResponseModel>
export type GetMediaItemByIdResult = AxiosResponse<ApiMediaWithCropsResponseModel>
