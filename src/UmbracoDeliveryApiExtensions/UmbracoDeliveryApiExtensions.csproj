<Project Sdk="Microsoft.NET.Sdk.Razor">
  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <WarningsAsErrors>nullable</WarningsAsErrors>
    <StaticWebAssetBasePath>App_Plugins</StaticWebAssetBasePath>
    <ContentTargetFolders>.</ContentTargetFolders>
    <Product>Umbraco.Community.DeliveryApiExtensions</Product>
    <PackageId>Umbraco.Community.DeliveryApiExtensions</PackageId>
    <Title>DeliveryApiExtensions</Title>
    <Description>Extensions for the Delivery API, including typed swagger and backoffice preview of the API responses.</Description>
    <PackageTags>umbraco;umbraco-marketplace;Swagger;OpenAPI</PackageTags>
    <RootNamespace>Umbraco.Community.DeliveryApiExtensions</RootNamespace>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <Version>0.0.0</Version>
    <Authors>ByteCrumb</Authors>
    <Copyright>$([System.DateTime]::UtcNow.ToString(`yyyy`)) Â© ByteCrumb</Copyright>
    <PackageProjectUrl>https://github.com/ByteCrumb/Umbraco.Community.DeliveryApiExtensions</PackageProjectUrl>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <PackageIcon>icon.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <RepositoryType>git</RepositoryType>
    <PackageLicenseExpression>MPL-2.0</PackageLicenseExpression>

    <StaticWebAssetsDisableProjectBuildTransitivePropsFileGeneration>true</StaticWebAssetsDisableProjectBuildTransitivePropsFileGeneration>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All" />
    <PackageReference Include="Microsoft.OpenApi" Version="1.4.5" />
    <PackageReference Include="Umbraco.Cms.Api.Delivery" Version="12.2.0" />
    <PackageReference Include="Umbraco.Cms.Web.Website" Version="12.2.0" />
    <PackageReference Include="Umbraco.Cms.Web.BackOffice" Version="12.2.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\UmbracoDeliveryApiExtensions.UI\UmbracoDeliveryApiExtensions.UI.esproj">
      <ReferenceOutputAssembly>False</ReferenceOutputAssembly>
    </ProjectReference>
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\docs\icon.png" Pack="true" PackagePath="\" />
    <None Include="buildTransitive\**" Pack="true" PackagePath="buildTransitive" />
  </ItemGroup>

  <!-- Include static files if not already,
       this is needed as generated files wouldn't be included otherwise,
       as the list of files to include is generated before the files are generated.
  -->
  <Target Name="IncludeStaticFiles" BeforeTargets="ResolveProjectStaticWebAssets">
    <ItemGroup>
      <Content Include="wwwroot\**" Exclude="@(Content)" />
    </ItemGroup>
  </Target>

  <!-- Generate AppSettings Schema -->
  <Target Name="GenerateAppSettingsSchema" AfterTargets="Build">
    <Exec Command="dotnet run --project ../../tools/UmbracoDeliveryApiExtensions.JsonSchemaGenerator -- -i $(OutputPath)UmbracoDeliveryApiExtensions.dll -o appsettings-schema.DeliveryApiExtensions.json -t Umbraco.Community.DeliveryApiExtensions.Configuration.Options.DeliveryApiExtensionsOptions" />
  </Target>

  <!-- Process Mardown files for NuGet specific content -->
  <ItemGroup>
    <MarkdownFiles Include="..\..\docs\README.md" />
  </ItemGroup>
  <Target Name="ProcessMarkdownFiles" AfterTargets="Build" Inputs="@(MarkdownFiles)" Outputs="@(MarkdownFiles->'$(IntermediateOutputPath)\%(Filename)%(Extension)')" >
    <PropertyGroup>
      <Regex>&lt;!--IF NUGET\s*([\s\S]*?)(\s*&lt;!--ELSE--&gt;\s*([\s\S]*?))?\s*&lt;!--END--&gt;</Regex>
      <Replacement>$1</Replacement>
    </PropertyGroup>

    <WriteLinesToFile
      File="@(MarkdownFiles->'$(IntermediateOutputPath)\%(Filename)%(Extension)')"
      Lines="$([System.Text.RegularExpressions.Regex]::Replace($([System.IO.File]::ReadAllText('%(Identity)')), '$(Regex)', '$(Replacement)'))"
      Overwrite="true" />

    <ItemGroup>
      <None Include="@(MarkdownFiles->'$(IntermediateOutputPath)\%(Filename)%(Extension)')" Pack="true" PackagePath="\" />
    </ItemGroup>
  </Target>

</Project>
